===========================================================================
        Algorithm: Sensor Positioning
           Author: CHEN Junwei, Stefano DISCETTI, Marco RAIOLA
       Laboratory: EAP of UC3M
  Project website: https://erc-nextflow.uc3m.es
   Project github: https://github.com/erc-nextflow
         Platform: MATLAB
             Date: 18th March 2025
          Version: 1.0.0
     Repositories: https://github.com/woiiiiow/sensor_positioning_V1
          Contact: junwei.chen@uc3m.es
===========================================================================

DESCRIPTION
This is the code used in sensor positioning for data-driven flow visualization combining PIV and probes (using time-embedded probes in the downstream). Here is an example on 3D synthetic dataset of channel flow at $Re_\tau = 1000$ from JHTDB (John Hopkins Turbulence Database).

PLATFORM
The codes are tested on:
AMD ThreadRipper 3990X/256 GB DDR4
Ubuntu 20.04.6 LTS/5.15.0-131-generic/MATLAB R2022a
around 1 hour for 2D case

SITE OF CODES
https://github.com/woiiiiow/sensor_positioning_V1

DATABASE

the original database is 
https://turbulence.idies.jhu.edu/home

RUNNING
1a. downloading data from zenodo, which is on Channel_DNS.
1b. if the dataset is not available on zenodo, use the code volumn_edge_new/ to download the data directly from the database, before running the script, downlaod the matlab tool at: https://turbulence.pha.jhu.edu/help/matlab/ and include it in the path.
2. downloading the codes here and move to Channel_DNS/sensor_positioning/
3. converting .h5 file to .mat file using h52mat.m
4. run traversing_volumn.m on MATLAB for 3D case and traversing_volumn_p2D.m for pseudo 2D case.

FILES IN GITHUB
traversing_volumn.m                             MATLAB script for sensor positioning (3D case)
traversing_volumn_p2D.m                         MATLAB script for sensor positioning (pseudo 2D case)
checkresult.m                                   MATLAB script for checking result
volumn_edge_new/                                folder of the code to download the database
in volumn_edge_new/ there are:
    HeadOfDownload.m                            MATLAB script saving the setting of download
    download_field.m                            MATLAB script to download the field data for training
    download_field_testing.m                    MATLAB script to download the field data for testing
    download_probe.m                            MATLAB script to download the probe data for training
    download_probe_testing.m                    MATLAB script to download the probe data for testing

FILES IN ZENODO
mat2h5.m                                        MATLAB script to convert the format from *.mat to *.h5
h52mat.m                                        MATLAB script to convert the format from *.h5 to *.mat
volumn_edge_new/                                folder to save the data
in volumn_edge_new/ there are:
    Fields/                                     folder of field data for training
    Fields_testing/                             folder of field data for testing
    Probes_linear/                              folder of probe data (multiple probes placed along a line in the downstream) for training
    Probes_linear_testing/                      folder of probe data (multiple probes placed along a line in the downstream) for testing
    in each folder of {Fields, Fields_testing} there are:
        Field_??????.mat                        saving flow field data
    in each folder of {Probes_linear, Probes_linear_testing} there are:
        Probe_??????.mat                        saving probe data
in sensor_positioning/ there are:
    geo_volumn.mat                              saving geometric data
    ProbeTraversing*.mat                        saving result

STRUCTURE OF DATA FILES
of Field_??????.mat:
    Xst, Yst, Zst: scalar;       starting position of the sub-domain
    u, v, w, p:    88x88x44;     X/Y/Z component of the velocity field and pressure field
    t:             scalar;       starting time of the sub-domain
    xb, yb:        1x88;         base grid for the sub-domain in X/Y-direction
    zb:            1x44;         base grid for the sub-domain in Z-direction

of Probe_??????.mat:
    EpisodeLength: scalar;       the length of time-embedded sensor signal
    EpisodeRetro:  scalar;       the length of time-embedded sensor signal before the snapshot
    UP, VP, WP:    200x88;       probe data, recording velocity (dim 1 for EpisodeLength, dim 2 for the geometry of the field)
    Xst, Yst, Zst: scalar;       starting position of the sub-domain
    dt:            scalar;       time interval of probe signal
    t:             scalar;       starting time of the sub-domain
    x_grid, y_grid, z_grid
                   scalar;       grid of starting position of the sub-domain
of geo_volumn.mat:
    xb, yb:        1x88;         base grid for the sub-domain in X/Y-direction
    zb:            1x44;         base grid for the sub-domain in Z-direction
    y_pr:          1x88;         base grid for probe position
of ProbeTraversing*.mat:
    AR:            3x4060;       array of probe position (dim 1 for number of probes, dim 2 for number of combinations)
    Acorr:         88x88;        matrix of correlation value
    CorrTh:        scalar;       threshold for correlation value
    Aerr_*:        1x4060;       velocity reconstruction error (dim 2 for the number of combinations)
    Derr_*:        scalar;       velocity reconstruction error for equidistant sensors
    Perr_*:        scalar;       velocity reconstruction error for block-pivoted QR sensors
    Row_list:      1x30;         saving sensor position for AR
    RowEqi:        1x3;          saving sensor position for equidistant sensors
    RowQR:         1x3;          saving sensor position for for block-pivoted QR sensors
    FieldStd:      scalar;       standard value of the velocity field

ACKNOWLEDGEMENT
We acknowledge John Hopkins Turbulent Database, and wish the user of data on Zenodo cite their articles.
